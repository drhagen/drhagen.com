<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>David R Hagen</title><description>Personal website of David R Hagen, scientific software engineer</description><link>https://drhagen.com/</link><atom:link href="https://drhagen.com/feed_rss_created.xml" rel="self" type="application/rss+xml" /><managingEditor>David Hagen</managingEditor><language>en</language> <pubDate>Tue, 25 Mar 2025 01:06:20 -0000</pubDate> <lastBuildDate>Tue, 25 Mar 2025 01:06:20 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.15.0</generator> <item> <title>Excellent error messages</title> <description>&lt;p&gt;Error messages are pervasive throughout programming, yet little has been written on the design of error messages for languages, libraries, and APIs. Much good advice can be found via simple web search on good error messages as shown to end users in GUIs, but standards for error messages intended for an audience of programmers is hard to find. This is not due to a lack of attention to error messages. There are certainly places where error messages are neglected, but neglect is far from universal. In fact, some of the best discussions on good error messages come from specific efforts by big projects to improve their error messages.&lt;/p&gt;</description><link>https://drhagen.com/blog/excellent-error-messages/</link> <pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/excellent-error-messages/</guid> </item> <item> <title>The sort-within-groups problem</title> <description>&lt;p&gt;There is an interesting edge case in data grammars when a grouped data table is sorted by non-group columns. For example, what should the following dplyr code produce?&lt;/p&gt;&lt;p&gt;```rlibrary(dplyr)&lt;/p&gt;&lt;p&gt;df &amp;lt;- data.frame( group = c(2, 2, 1, 1, 2, 2), value = c(3, 4, 3, 1, 1, 3))&lt;/p&gt;&lt;p&gt;df %&amp;gt;% group_by(group) %&amp;gt;% arrange(value)```&lt;/p&gt;</description><link>https://drhagen.com/blog/the-sort-within-groups-problem/</link> <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/the-sort-within-groups-problem/</guid> </item> <item> <title>Leap Years: Something the Gregorian Calendar Gets Right</title> <description>&lt;p&gt;Calendars coordinate people with people. It is better to be on vacation the same week your family is also. It is better for kids to be in school the same days as their teachers. It is better to be at work when everyone else is. (Though it is worse to be driving to said work when everyone else is.) In the modern world, it can be easy to think that coordinating people with people is all calendars do. If that were all, we could certainly do with a much simpler calendar—4 weeks to a month, 12 months to a year, no leap days, no irregularities forever. I won&#39;t argue that it couldn&#39;t be simpler, but I will argue that it cannot be perfectly simple. Because calendars also coordinate people with nature.&lt;/p&gt;</description><link>https://drhagen.com/blog/leap-years-something-the-gregorian-calendar-gets-right/</link> <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/leap-years-something-the-gregorian-calendar-gets-right/</guid> </item> <item> <title>Finally, a synthetic organism that worries me</title> <description>&lt;p&gt;It was &lt;a href=&#34;https://arstechnica.com/science/2019/01/re-engineering-photosynthesis-gives-plants-a-40-growth-boost/&#34;&gt;recently in the news&lt;/a&gt; that researchers have genetically engineered tobacco with 40% more efficient photosynthesis. I had first seen this kind of research at a seminar during my graduate years at MIT. The presenter noted that the genetically engineered plants grew faster and showed memorable side-by-side pictures of scrawny-looking normal plants next to their larger and lusher engineered brothers. I tried to find out more after the fact, but had forgotten the name of the presenter and lab. When I searched online for the research, I found lots of people proposing doing this kind of thing, but not the lush success story I had just seen. I wanted to learn more not because it was super cool and hugely important (which it was), but because it was the first (and to date only) example of what I thought was a dangerous genetically modified organism.&lt;/p&gt;</description><link>https://drhagen.com/blog/finally-a-synthetic-organism-that-worries-me/</link> <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/finally-a-synthetic-organism-that-worries-me/</guid> </item> <item> <title>Multidimensional Pairing Functions</title> <description>&lt;p&gt;In the &lt;a href=&#34;../2018-03-27-superior-pairing-function/index.md&#34;&gt;previous post&lt;/a&gt;, I compared ways to take two infinite streams and generate a new stream that is all possible combinations of the elements in those streams. This post takes it up another level and generalizes this procedure to an arbitrarily long list of infinite streams. This is a trickier task than the 2-dimensional case, utilizing recursion into each dimension to cleanly generate all combinations.&lt;/p&gt;&lt;p&gt;Throughout this post, the caret &lt;code&gt;^&lt;/code&gt; will indicate exponentiation and parentheses &lt;code&gt;list(index)&lt;/code&gt; will be used to indicate indexing a list. As before, 0-indexing will be used because it makes the math simpler. &lt;/p&gt;</description><link>https://drhagen.com/blog/multidimensional-pairing-functions/</link> <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/multidimensional-pairing-functions/</guid> </item> <item> <title>Superior Pairing Function</title> <description>&lt;p&gt;Given two sequences of objects, it is often desirable to generate a sequence which is all possible pairwise combinations of those sequences—the Cartesian product. If the sequences are finite in length, then it is a trivial function to write in any programming language. The function even exists in many standard libraries and packages, such as &lt;code&gt;itertools.product&lt;/code&gt; in Python. But if the sequences are infinite in length (that is, they are streams rather than arrays, depending on your terminology), the typical approach fails. Finding a way to iterate over all pairs of two infinitely long sequences is called a &#34;pairing function&#34; in mathematics and has practical uses. There are some existing pairing functions, but many have limitations. I describe the properties of a superior pairing function and a couple of methods that satisfy them.&lt;/p&gt;</description><link>https://drhagen.com/blog/superior-pairing-function/</link> <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/superior-pairing-function/</guid> </item> <item> <title>Ready for a National ID</title> <description>&lt;p&gt;When &lt;a href=&#34;https://www.cnet.com/news/yahoo-500-million-accounts-hacked-data-breach/&#34;&gt;Yahoo was hacked&lt;/a&gt;, we threw away our passwords and got new ones. When &lt;a href=&#34;https://bgr.com/2014/03/13/target-data-hack-how-it-happened/&#34;&gt;Target was hacked&lt;/a&gt;, we threw away our credit cards and got new ones. Now that &lt;a href=&#34;https://arstechnica.com/information-technology/2017/09/equifax-website-hack-exposes-data-for-143-million-us-consumers/&#34;&gt;Equifax has been hacked&lt;/a&gt;, we&#39;ll have to throw out our social security cards and get new ones. Alas, such a thing is not currently possible, and that&#39;s a big problem. It&#39;s not that we shouldn&#39;t have a national ID number. A robust credit system requires (1) a standardized system to identify who owes what so the government knows whose stuff to take if a debt is not paid and (2) a standardized system for recording past and current credit so that borrowers can support their creditworthiness. It was point (2) that got hacked, but it was the design of point (1) that makes the hack such a big problem. The social security number (SSN) is poorly suited for its role. As long as the SSN is both the account number and the unchangeable password for all our financial instruments, we will endure costly and rampant fraud. Just as the size of the Target hack forced the US to finally &lt;a href=&#34;https://www.npr.org/sections/alltechconsidered/2014/01/23/264910138/target-hack-a-tipping-point-in-moving-away-from-magnetic-stripes&#34;&gt;rethink credit card security&lt;/a&gt;, the size of the Equifax hack should force us to rethink our national ID security.&lt;/p&gt;</description><link>https://drhagen.com/blog/ready-for-a-national-id/</link> <pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/ready-for-a-national-id/</guid> </item> <item> <title>The Sanctification Button</title> <description>&lt;p&gt;I have a browser extension installed on my work laptop that blocks my access to Reddit, Facebook, and other news and social media sites. My employer didn&#39;t install it; I did. I have the same extension installed at home, albeit blocking a more limited set of time-wasting sites. On its face, setting up a system that does nothing but restrict my future options seems like a waste of time. Wouldn&#39;t it be easier just to choose to not visit those sites at imprudent times? In theory, sure. But I don&#39;t trust my future self, and restraint is taxing. I&#39;d have trouble explaining why. Admittedly it&#39;s weird, but I think I can assume that you, dear human reader, at least understand where I am coming from, regardless of how much you rely on such things yourself. In behavioral economics, we call these kinds of mechanisms &#34;precommitments&#34;. Odysseus bound himself to the mast before sailing past the Sirens. Gamblers leave behind their checkbooks and credit cards before a casino vacation. I am one of many who find it prudent to occasionally bind my future actions, restrict my future options, or simply nudge my older self in a certain direction. There remain plenty of mistakes that I would like to prevent, but for which there is no mechanism to preempt. Inevitably, technology will improve; new products will become available. Some of these, like the browser blocker, will be increasingly capable precommittment tools. How far should you go with this? Artificial intelligence combined with cybernetics could make any undesirable behavior potentially preemptable. Leaving aside the technical difficulties, if you could not only end your ability to lie, cheat, and steal, but also gossip and insult, should you? Taken to its extreme, if there were a button that removed your ability to sin, would you push it?&lt;/p&gt;</description><link>https://drhagen.com/blog/the-sanctification-button/</link> <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/the-sanctification-button/</guid> </item> <item> <title>Marginal vs. Conditional Subtyping</title> <description>&lt;p&gt;In computer programming, a type is a just a set of objects—not a physical set of objects in memory, but a conceptual set of objects. The type &lt;code&gt;Integer&lt;/code&gt; is the set &lt;code&gt;{0, 1, -1, ...}&lt;/code&gt;. Types are used to reason about the correctness of programs. A function that accepts an argument of type &lt;code&gt;Integer&lt;/code&gt;, will work for any value &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, etc., for some definition of &#34;works&#34;. Subtyping is used to define relationships between types. Type &lt;code&gt;B&lt;/code&gt; is a subset of a type &lt;code&gt;A&lt;/code&gt; if the set of objects defined by &lt;code&gt;B&lt;/code&gt; is a subset of the objects defined by &lt;code&gt;A&lt;/code&gt;. Every function that works on an instance of &lt;code&gt;A&lt;/code&gt; also works on an instance of &lt;code&gt;B&lt;/code&gt;, for some definition of &#34;works&#34;. If we were just doing math, subsets would be the end of subtyping. But types as pure sets exist only conceptually. Actual types must be concretely defined. It is not very efficient to define the &lt;code&gt;Integer&lt;/code&gt; class by writing all possible &lt;code&gt;Integer&lt;/code&gt;s! In most programs, the possible values of a type are constrained by their fields. Subtypes and supertypes typically differ by having more or fewer fields than the other. Sometimes, the subtype has more fields, and sometimes, the supertype has more fields. Many of you may be thinking, &#34;What? It&#39;s always one way, not the other!&#34; The funny thing is that some of you think the subtype always has more fields and others think the supertype always has more fields. That&#39;s because there are two kinds of subtyping. The first is what I call &#34;marginal subtyping&#34;, which is encountered in application programming and is well modeled by inheritance. The second is what I call &#34;conditional subtyping&#34;, which is encountered in mathematical programming and is well modeled by implicit conversions. Depending on the genre of programming you work in, the other kind of subtyping may be unknown and the language features needed to implement it may be maligned. But both needs are real and both features are necessary.&lt;/p&gt;</description><link>https://drhagen.com/blog/marginal-vs-conditional-subtyping/</link> <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/marginal-vs-conditional-subtyping/</guid> </item> <item> <title>The Missing 23rd of the Month</title> <description>&lt;p&gt;Previously, I explained why the &lt;a href=&#34;../2015-12-29-the-missing-11th-of-the-month/index.md&#34;&gt;11th of most months is mentioned far less than the other days&lt;/a&gt; in the Google Ngrams database of English literature from 1800-2008. This was to solve a long-standing question posed in an &lt;a href=&#34;https://xkcd.com/1140/&#34;&gt;xkcd comic&lt;/a&gt;. While researching this, I encountered another mystery: the 2nd, 3rd, 22nd, and 23rd are unusually low as well—but only until the 1930s, at which point they become perfectly normal days. Last time, I set this question aside to focus on the 11th. In this installment, I explain the strange behavior of these four days.&lt;/p&gt;</description><link>https://drhagen.com/blog/the-missing-23rd-of-the-month/</link> <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/the-missing-23rd-of-the-month/</guid> </item> <item> <title>The Missing 11th of the Month</title> <description>&lt;figure markdown=&#34;span&#34;&gt; ![In months other than September, the 11th is mentioned substantially less often than any other date. It&#39;s been that way since long before 9/11 and I have no idea why.](images/calendar_of_meaningful_dates_light.png#only-light) ![In months other than September, the 11th is mentioned substantially less often than any other date. It&#39;s been that way since long before 9/11 and I have no idea why.](images/calendar_of_meaningful_dates_dark.png#only-dark) Source [xkcd](https://xkcd.com/1140/). Image licensed under [CC-BY-NC](https://creativecommons.org/licenses/by-nc/2.5/).&lt;/figure&gt;&lt;p&gt;On November 28th, 2012, Randall Munroe published &lt;a href=&#34;https://xkcd.com/1140/&#34;&gt;an xkcd comic&lt;/a&gt; that was a calendar in which the size of each date was proportional to how often each date is referenced by its ordinal name (e.g. &#34;October 14th&#34;) in the &lt;a href=&#34;https://books.google.com/ngrams&#34;&gt;Google Ngrams database&lt;/a&gt; since 2000. Most of the large days are pretty much what you would expect: &lt;a href=&#34;https://en.wikipedia.org/wiki/Independence_Day_(United_States)&#34;&gt;July 4th&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Christmas&#34;&gt;December 25th&lt;/a&gt;, the 1st of every month, the last day of most months, and of course a &lt;a href=&#34;https://en.wikipedia.org/wiki/September_11_attacks&#34;&gt;September 11th&lt;/a&gt; that shoves its neighbors into the margins. There are not many days that seem to be smaller than the typical size. &lt;a href=&#34;https://en.wikipedia.org/wiki/Leap_year&#34;&gt;February 29th&lt;/a&gt; is a tiny speck, for instance. But if you stare at the comic long enough, you may get the impression that the 11th of most months is unusually small. The title text of the comic concurs, reading &#34;In months other than September, the 11th is mentioned substantially less often than any other date. It&#39;s been that way since long before 9/11 and I have no idea why.&#34; After digging into the raw data, I believe I have figured out why.&lt;/p&gt;</description><link>https://drhagen.com/blog/the-missing-11th-of-the-month/</link> <pubDate>Tue, 29 Dec 2015 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/the-missing-11th-of-the-month/</guid> </item> <item> <title>Sane Equality</title> <description>&lt;p&gt;Equality: every programming language has it, the &lt;code&gt;==&lt;/code&gt; syntax is as universal as &lt;code&gt;1+1&lt;/code&gt;, and it works almost the same in every language. When the left and right operands are the same type, equality is easy. No one questions that &lt;code&gt;1==1&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt; or that &lt;code&gt;&#34;a&#34;==&#34;b&#34;&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt;. This post is about what to do when the operands are different types. What should &lt;code&gt;1==&#34;1&#34;&lt;/code&gt; be? Or what should &lt;code&gt;Circle(1,2,2)==Point(1,2)&lt;/code&gt; be? Or what should &lt;code&gt;ColoredPoint(1,2,red)==Point(1,2)&lt;/code&gt; be?&lt;/p&gt;</description><link>https://drhagen.com/blog/sane-equality/</link> <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/sane-equality/</guid> </item> <item> <title>When Sequences Go Bad</title> <description>&lt;p&gt;In my &lt;a href=&#34;../2015-05-09-one-sided-debate-over-sequence-syntax/index.md&#34;&gt;last post&lt;/a&gt;, I talked about the various kinds of syntax for getting and setting elements in sequences. This post will talk about semantics. What exactly should &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;mutate&lt;/code&gt; do when invoked? What should happen when the index is valid is hopefully obvious. But because we have to handle the case of an invalid index—in particular, an index larger than the length of the sequence, the answer is not as clear-cut as it may seem. If &#34;throw an exception&#34; is the only thing that comes to mind, you have been stuck in procedural programming for too long.&lt;/p&gt;</description><link>https://drhagen.com/blog/when-sequences-go-bad/</link> <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/when-sequences-go-bad/</guid> </item> <item> <title>One-Sided Debate over Sequence Syntax</title> <description>&lt;p&gt;Computers are &lt;a href=&#34;https://www.benshoemate.com/2008/11/30/einstein-never-said-that/&#34;&gt;famously stupid machines&lt;/a&gt;. You have to tell them in perfect detail not just what you want them to do but how to do it. A computer may be able to add 1 and 2 faster than I can, but it will take me longer to tell it to do that than for me to do it myself. The more complex the task, the more time it takes to code. Coding is still laborious and entirely not worth it unless such code will be used many times. I posit that a computer is only useful for doing work when the vast majority of the work to be done is repetitive tasks on simple objects. The most common abstraction for representing a bunch of objects is the sequence (also known as a list or array), in which each object in the collection is associated with an integer called its index. There is a wide diversity of syntax and semantics for accessing and changing sequences.&lt;/p&gt;</description><link>https://drhagen.com/blog/one-sided-debate-over-sequence-syntax/</link> <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/one-sided-debate-over-sequence-syntax/</guid> </item> <item> <title>Difficulty of Pattern Matching Syntax</title> <description>&lt;p&gt;Pattern matching is compact syntax, originating in functional programming languages, that acts a super-charged switch statement, allowing one to concisely branch on the types and components of a value of interest. Like a traditional switch statement, a pattern match takes a single object and compares it to sequence of cases, running the code body associated with the matching case. There are many parts to a pattern matcher. and design concise and unambiguous syntax is a difficult endeavor, one failed by many popular programming languages.&lt;/p&gt;</description><link>https://drhagen.com/blog/difficulty-of-pattern-matching-syntax/</link> <pubDate>Sat, 07 Mar 2015 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/difficulty-of-pattern-matching-syntax/</guid> </item> <item> <title>Free Star Wars for Everyone</title> <description>&lt;p&gt;You got a robotic vacuum cleaner for Christmas. It is the cutest little thing—circling around the room, diligently picking up confetti from the New Years Eve party the night before. You just can&#39;t let all that cuteness go to waste. So you record the whole cycle on your phone—the whole two hours and twenty minutes—and post it to your Youtube channel. You have 5 subscribers, all spam bots. Your video goes on to get a million views because the pet name you gave to the vacuum matches the name of an politician recently embroiled in scandal, making &#34;&amp;lt;politician&#39;s name&amp;gt; Cleans House&#34; accidental clickbait.&lt;/p&gt;</description><link>https://drhagen.com/blog/free-star-wars-for-everyone/</link> <pubDate>Sat, 21 Feb 2015 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/free-star-wars-for-everyone/</guid> </item> <item> <title>Comparison of Iteration Styles in Programming</title> <description>&lt;p&gt;It is difficult to overstate the importance of iteration in programming—the process performing an operation on each element of a list. I would rank only variable assignment, functions calling, and branching as more important. Unlike the &lt;code&gt;if&lt;/code&gt; statement, which is essentially the same in every language, the semantics of the &lt;code&gt;for&lt;/code&gt; loop varies across languages. Mainly for my own future reference, this post compares the various styles of iteration that I have come across. The examples are in pseudo code which is the only way to write so many different iteration styles under similar syntax. Each of the examples is trying to do the same thing: print out each element of a list called &lt;code&gt;list&lt;/code&gt;.&lt;/p&gt;</description><link>https://drhagen.com/blog/comparison-of-iteration-styles-in-programming/</link> <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/comparison-of-iteration-styles-in-programming/</guid> </item> <item> <title>The Electoral Jury</title> <description>&lt;p&gt;How much time to do you spend figuring out how you should vote? A few hours? A few minutes? Any time at all? I could not find a study that measured the average time that voters spend researching their candidates, but I did find that &lt;a href=&#34;https://www.economist.com/blogs/buttonwood/2012/01/economics-irrationality&#34;&gt;three quarters of Americans do not know how long a senator&#39;s term is&lt;/a&gt;. Perhaps an average voter reads the blurbs in the local newspaper, listens to some soundbites on the news about each candidate, and watches a myriad of television ads. Does he read each candidate&#39;s website? If not, this is like owning a bagel shop and hiring a manager without reading his resume. Imagine a bagel shop where all employees are hired with the same consideration that the average voter gives to political candidates. Such a shop would operate with the legendary efficiency and effectiveness of a DMV.&lt;/p&gt;</description><link>https://drhagen.com/blog/the-electoral-jury/</link> <pubDate>Wed, 05 Feb 2014 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/the-electoral-jury/</guid> </item> <item> <title>Trial by Jury: Omnibus</title> <description>&lt;p&gt;Here is a collection of short thoughts from my time as a juror.&lt;/p&gt;</description><link>https://drhagen.com/blog/trial-by-jury-omnibus/</link> <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/trial-by-jury-omnibus/</guid> </item> <item> <title>Trial by Jury: Keep the Jury, Eliminate the Trial</title> <description>&lt;p&gt;&lt;a href=&#34;../2013-12-21-trial-by-jury-just-give-us-the-facts/index.md&#34;&gt;Yesterday&lt;/a&gt;, I made a simple argument for handing the jurors the facts that are not in dispute at the beginning of the trial. I want to extend that argument a bit further to a more expansive idea that I have. Rather than just giving the undisputed facts to the jurors, why not boil the entire trial down to its text and give it to the jury as a kind of case study. All of the questions asked in the trial are already in multiple depositions. If a witness gives an answer that is different from the deposition, the deposition is brought out and read. Why not deliver all the evidence to the jury in writing? I can read faster than I can listen, and importantly, I can alter my pace as needed.&lt;/p&gt;</description><link>https://drhagen.com/blog/trial-by-jury-keep-the-jury-eliminate-the-trial/</link> <pubDate>Sun, 22 Dec 2013 00:00:00 +0000</pubDate><source url="https://drhagen.com/feed_rss_created.xml">David R Hagen</source><guid isPermaLink="true">https://drhagen.com/blog/trial-by-jury-keep-the-jury-eliminate-the-trial/</guid> </item> </channel></rss>